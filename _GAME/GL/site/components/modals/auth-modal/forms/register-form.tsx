'use client';
import React from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui';
import { FormInput } from '@/components/form/form-input';
import toast from 'react-hot-toast';
import { registerUser } from '@/app/actions';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registerSchema = z.object({
    fullName: z.string().min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞').nonempty('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
    email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').nonempty('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
    password: z.string().min(4, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞').nonempty('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
});

type FormValues = z.infer<typeof registerSchema>;

interface Props {
    onClose?: VoidFunction;
}

export const RegisterForm: React.FC<Props> = ({ onClose }) => {
    const form = useForm<FormValues>({
        resolver: zodResolver(registerSchema),
        defaultValues: {
            fullName: '',
            email: '',
            password: '',
        },
    });

    const onSubmit = async (data: FormValues) => {
        try {
            await registerUser(data);
            toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', {
                icon: 'üìß',
                duration: 5000,
                style: {
                    background: '#d1fae5',
                    color: '#065f46',
                    border: '1px solid #065f46',
                    padding: '16px',
                    borderRadius: '8px',
                },
            });
            onClose?.();
        } catch (error) {
            console.error('Error [REGISTER]', error);
            toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç.', {
                icon: '‚ùå',
                duration: 3000,
                style: {
                    background: '#fee2e2',
                    color: '#b91c1c',
                    border: '1px solid #b91c1c',
                    padding: '16px',
                    borderRadius: '8px',
                },
            });
        }
    };

    return (
        <FormProvider {...form}>
            <form className="flex flex-col gap-5" onSubmit={form.handleSubmit(onSubmit)}>
                <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />
                <FormInput name="email" label="E-Mail" required />
                <FormInput name="password" label="–ü–∞—Ä–æ–ª—å (–ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)" type="password" required />

                <Button loading={form.formState.isSubmitting} className="h-12 text-base" type="submit">
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Button>
            </form>
        </FormProvider>
    );
};