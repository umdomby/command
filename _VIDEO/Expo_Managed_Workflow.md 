Expo Managed Workflow с ограничениями
Если вы хотите использовать Expo Managed Workflow (без EAS Build), вы можете использовать библиотеки, которые работают на чистом JavaScript, например:

SimpleWebRTC.

PeerJS.

Однако эти библиотеки могут быть ограничены в функциональности и не поддерживают все функции WebRTC.

3. Пример кода с react-native-webrtc
javascript
Copy
import React, { useEffect, useRef } from 'react';
import { View, Text } from 'react-native';
import { RTCPeerConnection, RTCView, mediaDevices } from 'react-native-webrtc';

const App = () => {
  const localStream = useRef(null);
  const remoteStream = useRef(null);

  useEffect(() => {
    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };
    const peerConnection = new RTCPeerConnection(configuration);

    // Захват видео с камеры
    mediaDevices.getUserMedia({ video: true, audio: true })
      .then(stream => {
        localStream.current = stream;
        peerConnection.addStream(stream);
      });

    // Обработка удаленного потока
    peerConnection.onaddstream = event => {
      remoteStream.current = event.stream;
    };

    // Создание предложения (offer)
    peerConnection.createOffer()
      .then(offer => peerConnection.setLocalDescription(offer))
      .then(() => {
        // Отправка предложения на сигнальный сервер
        sendOfferToServer(peerConnection.localDescription);
      });

    return () => {
      peerConnection.close();
    };
  }, []);

  return (
    <View>
      <Text>Local Video</Text>
      <RTCView streamURL={localStream.current?.toURL()} />
      <Text>Remote Video</Text>
      <RTCView streamURL={remoteStream.current?.toURL()} />
    </View>
  );
};

export default App;
4. Ограничения
Expo Go не поддерживает WebRTC.

Для использования WebRTC требуется EAS Build или Expo Dev Client.

Для сборки и тестирования на iOS потребуется Mac (или удаленный Mac через EAS Build).